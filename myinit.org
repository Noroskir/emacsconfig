#+STARTUP overview

* Interface Tweaks
 #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   (setq inhibit-startup-message t) ;; hide the startup message
   ;; Show line numbers except for org mode
   (global-display-line-numbers-mode t)
   (dolist (mode '(org-mode-hook
		   term-mode-hook
		   eshell-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))
   (tool-bar-mode -1) ;;disable toolbar
   (menu-bar-mode -1) ;; disable menu bar
   (scroll-bar-mode -1) ;; disable scroll bar
   (global-hl-line-mode t)
   (global-set-key (kbd "<f5>") 'revert-buffer)
   (global-set-key (kbd "M-,") 'pop-tag-mark) ;; go to last place where M-. was used (go-to-definition)
   (eval-after-load "flyspell"
     '(define-key flyspell-mode-map (kbd "C-;") nil))
   (setq-default fill-column 90)
   (setq sentence-end-double-space nil)
   (use-package rainbow-delimiters
     :ensure t
     :hook (prog-mode . rainbow-delimiters-mode))
 #+END_SRC
* Backups
  Make backups in central folder
  #+BEGIN_SRC emacs-lisp
    (let ((backup-dir "~/.emacs.d/backups")
	  (auto-saves-dir "~/.emacs.d/backups"))
      (when (not (file-directory-p backup-dir))
	(make-directory backup-dir t))
      (setq backup-directory-alist `(("." . ,backup-dir))
	    auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
	    auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
	    tramp-backup-directory-alist `((".*" . ,backup-dir))
	    tramp-auto-save-directory auto-saves-dir))

    (setq backup-by-copying t
	  delete-old-versions t
	  version-control t
	  kept-new-versions 5
	  kept-old-versions 2)

  #+END_SRC
* Themes and Modeline
  #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :config
      (setq doom-themes-enable-bold t
	    doom-themes-enable-italic t)
      (load-theme 'doom-one t)
      (doom-themes-org-config))

    (use-package all-the-icons
      :ensure t
      :commands all-the-icons-install-fonts
      :init
      (unless (find-font (font-spec :name "all-the-icons"))
	(all-the-icons-install-fonts t)))

    (use-package all-the-icons-dired
      :ensure t
      :hook (dired-mode . all-the-icons-dired-mode))

    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1))
  #+END_SRC
* ibuffer
  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer-other-window)
    (setq ibuffer-saved-filter-groups
	  (quote (("default"
		   ("dired" (mode . dired-mode))
		   ("LaTeX" (mode . latex-mode))
		   ("org" (name . "^.*org$"))
		   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		   ("Python" (mode . python-mode))
		   ("C++" (mode . c++-mode))
		   ("julia" (mode . julia-mode))
		   ("emacs" (or
			     (name . "^\\*scratch\\*$")
			     (name . "^\\*Messages\\*$")))
		   ))))
    (add-hook 'ibuffer-mode-hook
	      (lambda ()
		(ibuffer-auto-mode 1)
		(ibuffer-switch-to-saved-filter-groups "default")))
    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil)
  #+END_SRC
* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* Helpful
  #+BEGIN_SRC emacs-lisp
    ;; TODO ??
    (use-package helpful
      :ensure t
      :bind
      ("C-h f" . helpful-callable)
      ("C-h v" . helpful-variable)
      ("C-h k" . helpful-key))
  #+END_SRC
* Which Key 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config (which-key-mode)) 
#+END_SRC

* Org mode 
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-src-tab-acts-natively t)
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
      (setq org-log-done 'time))

    (defun org-my-custom-timestamp ()
      (interactive)
      (insert (format-time-string "%H:%M")))
    (add-hook 'org-mode-hook
	      (lambda ()
		(local-set-key (kbd "C-c C-n .") 'org-my-custom-timestamp)))

    (setq org-agenda-files (list "~/Documents/Uni/uni.org"))
  #+END_SRC
* selectrum/ctrlf/amx/consult
  #+BEGIN_SRC emacs-lisp
    (use-package selectrum
      :ensure t
      :config
      (selectrum-mode +1)
      (selectrum-prescient-mode +1)
      (prescient-persist-mode +1))

    (use-package consult
      :ensure t
      :bind (
	     ("C-x b" . consult-buffer)
	     ("M-y" . consult-yank-pop))
      :config
      (recentf-mode +1))

    (use-package ctrlf
      :ensure t
      :config
      (ctrlf-mode +1))

    (use-package amx
      :ensure t
      :config
      (amx-mode +1))
  #+END_SRC

* swiper /counsil /ivy
  #+BEGIN_SRC emacs-lisp
    ;; (use-package ivy
    ;;   :ensure t
    ;;   :diminish (ivy-mode)
    ;;   :bind (("C-x b" . ivy-switch-buffer))
    ;;   :config
    ;;   (ivy-mode 1)
    ;;   (setq ivy-use-virtual-buffers t)
    ;;   (setq ivy-display-style 'fancy))

    ;; (use-package ivy-prescient
    ;;   :ensure t)

    ;; (use-package counsel
    ;;   :ensure t
    ;;   :bind
    ;;   (("M-y" . counsel-yank-pop)
    ;;    :map ivy-minibuffer-map
    ;;    ("M-y" . ivy-next-line)))


    ;; (use-package swiper
    ;;   :ensure t
    ;;   :bind (("C-M-s" . swiper)
    ;; 	 ("C-c C-r" . ivy-resume)
    ;; 	 ("M-x" . counsel-M-x)
    ;; 	 ("C-x C-f" . counsel-find-file))
    ;;   :config
    ;;   (progn
    ;;     (ivy-mode 1)
    ;;     (setq ivy-use-virtual-buffers t)
    ;;     (setq ivy-display-style 'fancy)
    ;;     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    ;;     ))
  #+END_SRC

* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind
    (:map company-active-map
	  ("<tab>" . company-complete-selection))
    ;; (:map lsp-mode-map
    ;; 	  ("<tab>" . company-indent-or-complete-common))
    :config
    (progn
      (setq company-dabbrev-downcase 0)
      (setq company-idle-delay 0)
      (setq company-require-match nil)
      (defvar company-mode/enable-yas t)
      (add-hook 'after-init-hook 'global-company-mode)))

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
	backend
      (append (if (consp backend) backend (list backend))
	      '(:with company-yasnippet))))

  ;; (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)) 

  (use-package company-lsp
    :ensure t
    :commands company-lsp
    :config (push 'company-lsp company-backends))

  (use-package company-prescient
    :ensure t)


#+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC

* smart parenthesis
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :ensure t
      :config
      (use-package smartparens-config)
      (use-package smartparens-python)
      (use-package smartparens-latex)
      (show-smartparens-global-mode 1)
      (smartparens-global-mode 1))

  #+END_SRC
* yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config
      (progn
	(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
	(yas-reload-all)
	(add-hook 'c++-mode-hook #'yas-minor-mode)
	(add-hook 'latex-mode-hook #'yas-minor-mode)
	(yas-global-mode 1)))

    (use-package yasnippet-snippets
      :ensure t)
  #+END_SRC
  
* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

* iedit
  #+BEGIN_SRC emacs-lisp
      (use-package iedit
	:ensure t)

    (defun narrow-or-widen-dwim (p)
      "Widen if buffer is narrowed, narrow-dwim otherwise.
    Dwim means: region, org-src-block, org-subtree, or
    defun, whichever applies first. Narrowing to
    org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer
    is already narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
	    ((region-active-p)
	     (narrow-to-region (region-beginning)
			       (region-end)))
	    ((derived-mode-p 'org-mode)
	     ;; `org-edit-src-code' is not a real narrowing
	     ;; command. Remove this first conditional if
	     ;; you don't want it.
	     (cond ((ignore-errors (org-edit-src-code) t)
		    (delete-other-windows))
		   ((ignore-errors (org-narrow-to-block) t))
		   (t (org-narrow-to-subtree))))
	    ((derived-mode-p 'latex-mode)
	     (LaTeX-narrow-to-environment))
	    (t (narrow-to-defun))))

    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
    (add-hook 'LaTeX-mode-hook
	      (lambda ()
		(define-key LaTeX-mode-map "\C-xn"
		  nil)))
  #+END_SRC

* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-global-mode
       (setq projectile-completion-system 'ivy))
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode))
  #+END_SRC
* Anki
  #+BEGIN_SRC emacs-lisp
    (use-package anki-editor
      :ensure t)

  #+END_SRC
* Misc packages
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))

  ;; (use-package aggressive-indent
  ;;   :ensure t
  ;;   :config
  ;;   (global-aggressive-indent-mode 1))

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  (setq save-interprogram-paste-before-kill t)

  (use-package evil-nerd-commenter
    :ensure t
    :bind ("M-;" . evilnc-comment-or-uncomment-lines))
#+END_SRC

* Load other files 
  Useful to outsource stuff into other files
  #+BEGIN_SRC emacs-lisp
    (defun load-if-exists (f)
      "load elisp file if exists and is readable"
      (if (file-readable-p f)
	  (load-file f)))
  #+END_SRC

* Programming Languages
** Python 
   #+BEGIN_SRC emacs-lisp
     (use-package py-autopep8
       :ensure t)
     (use-package elpy
       :ensure t
       :config
       (progn
	 (elpy-enable)
	 (setq elpy-rpc-python-command "python3") ;;use python3
	 (setq python-shell-interpreter "python3");;use python3
	 (setq elpy-shell-echo-input nil)
	 (setq python-shell-completion-native-enable nil)
	 (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
	 (global-set-key (kbd "M-n") 'elpy-nav-forward-block)   ;;move bock down
	 (global-set-key (kbd "M-p") 'elpy-nav-backward-block)  ;;move bock up
	 (setq flycheck-flake8-maximum-line-length 100)
	 (add-hook 'elpy-mode-hook 'flycheck-mode)
	 ))

     (add-hook 'python-mode-hook (lambda() (flyspell-prog-mode))) ;; flyspell for mi baad inglisch

     (when (require 'flycheck nil t)
       (setq elpy-modules(delq 'elpy-module-flymake elpy-modules)))
     ;; conda
     ;; (setenv "WORKON_HOME" "/home/jonas/.miniconda3/envs")
   #+END_SRC

** Julia
   #+BEGIN_SRC emacs-lisp

     (setenv "PATH" (concat (getenv "PATH") ":/usr/local/programs/julia-1.6.0/bin/"))
     (setq exec-path (append exec-path '("/usr/local/programs/julia-1.6.0/bin/")))

     (use-package lsp-mode
       :ensure t
       :config
       (setq lsp-enable-indentation nil)
       (setq lsp-enable-on-type-formatting nil))

     (use-package lsp-julia
       :ensure t
       :config
       (progn
	 (setq lsp-julia-default-environment "~/.julia/environments/v1.6")
	 (setq lsp-julia-package-dir nil)))

     (use-package julia-mode
       :ensure t
       :config
       (progn
	 (add-hook 'julia-mode-hook #'lsp-mode)
	 (add-hook 'julia-mode-hook #'lsp)))
   #+END_SRC

** C++
   #+BEGIN_SRC emacs-lisp
     (use-package ccls
       :ensure t
       :config
       (setq ccls-executable "ccls")
       (setq lsp-prefer-flymake nil)
       (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
       :hook ((c-mode c++-mode objc-mode cuda-mode) .
	      (lambda () (require 'ccls) (lsp))))

     (eval-after-load 'flycheck
       '(progn
	  (require 'flycheck-google-cpplint)
	  (flycheck-add-next-checker 'c/c++-clang
				     '(warning . c/c++-googlelint))))

   #+END_SRC

** Latex with Auctex
   #+BEGIN_SRC emacs-lisp
     (add-hook 'LaTeX-mode-hook 'flyspell-mode)
     (add-hook 'LaTeX-mode-hook 'flyspell-buffer)
     (defun german-dict ()
       (ispell-change-dictionary 'german))

     ;; (add-hook 'LaTeX-mode-hook 'german-dict)

     (load "auctex.el" nil t t)

     (setq TeX-auto-save t)
     (setq TeX-parse-self t)
     (setq TeX-save-query nil)

     (setq TeX-PDF-mode t)


     (require 'tex-site)
     (autoload 'reftex-mode "reftex" "RefTeX Minor Mode" t)
     (autoload 'turn-on-reftex "reftex" "RefTeX Minor Mode" nil)
     (autoload 'reftex-citation "reftex-cite" "Make citation" nil)
     (autoload 'reftex-index-phrase-mode "reftex-index" "Phrase Mode" t)
     (add-hook 'latex-mode-hook 'turn-on-reftex) ; with Emacs latex mode
     ;; (add-hook 'reftex-load-hook 'imenu-add-menubar-index)
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

     (setq LaTeX-eqnarray-label "eq"
	   LaTeX-equation-label "eq"
	   LaTeX-figure-label "fig"
	   LaTeX-table-label "tab"
	   LaTeX-myChapter-label "chap"
	   TeX-auto-save t
	   TeX-newline-function 'reindent-then-newline-and-indent
	   TeX-parse-self t
	   ;; TeX-style-path
	   ;; '("style/" "auto/"
	   ;; "/usr/share/emacs21/site-lisp/auctex/style/"
	   ;; "/var/lib/auctex/emacs21/"
	   ;; "/usr/local/share/emacs/site-lisp/auctex/style/")
	   LaTeX-section-hook
	   '(LaTeX-section-heading
	     LaTeX-section-title
	     LaTeX-section-toc
	     LaTeX-section-section
	     LaTeX-section-label))
     ;; Fix latex item indent
     (defun LaTeX-indent-item ()
       "Provide proper indentation for LaTeX \"itemize\",\"enumerate\", and
     \"description\" environments.

       \"\\item\" is indented `LaTeX-indent-level' spaces relative to
       the the beginning of the environment.

       Continuation lines are indented either twice
       `LaTeX-indent-level', or `LaTeX-indent-level-item-continuation'
       if the latter is bound."
       (save-match-data
	 (let* ((offset LaTeX-indent-level)
		(contin (or (and (boundp 'LaTeX-indent-level-item-continuation)
				 LaTeX-indent-level-item-continuation)
			    (* 2 LaTeX-indent-level)))
		(re-beg "\\\\begin{")
		(re-end "\\\\end{")
		(re-env "\\(itemize\\|\\enumerate\\|description\\)")
		(indent (save-excursion
			  (when (looking-at (concat re-beg re-env "}"))
			    (end-of-line))
			  (LaTeX-find-matching-begin)
			  (current-column))))
	   (cond ((looking-at (concat re-beg re-env "}"))
		  (or (save-excursion
			(beginning-of-line)
			(ignore-errors
			  (LaTeX-find-matching-begin)
			  (+ (current-column)
			     (if (looking-at (concat re-beg re-env "}"))
				 contin
			       offset))))
		      indent))
		  ((looking-at (concat re-end re-env "}"))
		   indent)
		 ((looking-at "\\\\item")
		  (+ offset indent))
		 (t
		  (+ contin indent))))))

     (defcustom LaTeX-indent-level-item-continuation 4
       "*Indentation of continuation lines for items in itemize-like
     environments."
       :group 'LaTeX-indentation
       :type 'integer)

     (eval-after-load "latex"
       '(setq LaTeX-indent-environment-list
	      (nconc '(("itemize" LaTeX-indent-item)
		       ("enumerate" LaTeX-indent-item)
		       ("description" LaTeX-indent-item))
		     LaTeX-indent-environment-list)))



     ;; Make okular work
     (setq TeX-source-correlate-mode t
	   TeX-source-correlate-start-server t)
     (eval-after-load "tex"
       '(setcar (cdr (assoc 'output-pdf TeX-view-program-selection)) "Okular"))


     (company-auctex-init)
     (setq company-math-disallow-unicode-symbols-in-face nil)
     (append '((company-math-symbols-latex company-math-symbols-unicode
		   company-auctex-macros company-auctex-environments))
			   company-backends)


   #+END_SRC
* PDF Tools
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :config
      (pdf-tools-install))

    (use-package org-pdftools
      :hook (org-load . org-pdftools-setup-link))

    (use-package org-noter-pdftools
      :after org-noter
      :config
      (with-eval-after-load 'pdf-annot
	(add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
  #+END_SRC
* the rest
#+BEGIN_SRC emacs-lisp
  ;; multiple-cursors
  ;; --------------------------------------
  (require 'multiple-cursors)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)  
#+END_SRC


